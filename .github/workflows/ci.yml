name: CI Pipeline

on:
  push:
    branches: [main, "feature/**"]
  pull_request:
    branches: [main]

jobs:
  # Backend CI
  backend-lint-and-test:
    name: Backend - Lint and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: "./backend/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Type check
        run: pnpm run build

      - name: Run unit tests
        run: pnpm test
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret-key-for-ci-pipeline-only-min-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-pipeline-only-min-32-chars
          NODE_ENV: test

      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          MONGODB_URI: mongodb://localhost:27017/test-e2e
          JWT_SECRET: test-secret-key-for-ci-pipeline-only-min-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-pipeline-only-min-32-chars
          NODE_ENV: test

      - name: Generate coverage report
        run: pnpm run test:cov
        env:
          MONGODB_URI: mongodb://localhost:27017/test-cov
          JWT_SECRET: test-secret-key-for-ci-pipeline-only-min-32-chars
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-pipeline-only-min-32-chars
          NODE_ENV: test

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report-${{ matrix.node-version }}
          path: backend/coverage/
          retention-days: 7

  # Frontend CI
  frontend-lint-and-test:
    name: Frontend - Lint and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: "./frontend/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Type check and build
        run: pnpm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000

  # Docker Build Test
  docker-build-test:
    name: Docker - Build Test
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test, frontend-lint-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend Docker build
        run: |
          docker build -f backend/Dockerfile.dev -t easygenerator-backend:test ./backend

      - name: Test frontend Docker build
        run: |
          docker build -f frontend/Dockerfile.dev -t easygenerator-frontend:test ./frontend

      - name: Test docker-compose configuration
        run: |
          touch backend/.env frontend/.env
          docker compose config

  # Final CI Success Gate
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test, frontend-lint-and-test, docker-build-test]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.backend-lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.frontend-lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.docker-build-test.result }}" != "success" ]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "âœ… All CI checks passed successfully!"
