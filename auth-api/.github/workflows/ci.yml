name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.18.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format -- --check

  # Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.18.3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test

      - name: Run test coverage
        run: pnpm run test:cov

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # E2E tests with Docker
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: easygenerator-auth-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start services
        run: |
          docker-compose up -d mongodb
          sleep 10

      - name: Run E2E tests
        run: |
          docker run --rm \
            --network easygenerator-network \
            -e MONGODB_URI=mongodb://admin:password123@mongodb:27017/easygenerator-auth?authSource=admin \
            easygenerator-auth-api:test \
            pnpm run test:e2e

      - name: Stop services
        if: always()
        run: docker-compose down

  # Docker build test (no push)
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: easygenerator-auth-api:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Verify all checks passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, test-e2e, docker-build-test]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.test-e2e.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build-test.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
