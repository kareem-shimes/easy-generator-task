/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign up a new user
         * @description Creates a new user account and returns access token. Sets httpOnly refresh token cookie.
         */
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign in an existing user
         * @description Authenticates user credentials and returns access token. Sets httpOnly refresh token cookie.
         */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Uses refresh token from httpOnly cookie to generate new access and refresh tokens. Requires refresh_token cookie.
         */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Logs out the current user by clearing the refresh_token httpOnly cookie. The client should also discard the access token. Requires a valid refresh_token cookie to be present.
         */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["UsersController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user profile */
        patch: operations["UsersController_updateProfile"];
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserEntity: {
            /** @example 507f1f77bcf86cd799439011 */
            _id: string;
            /** @example user@example.com */
            email: string;
            /** @example John Doe */
            name: string;
            /**
             * Format: date-time
             * @example 2025-10-29T10:30:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-10-29T10:30:00.000Z
             */
            updatedAt: string;
        };
        AuthResponseDto: {
            user: components["schemas"]["UserEntity"];
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token: string;
        };
        WrappedErrorResponseDto: {
            /**
             * @description Indicates failure status
             * @example false
             */
            success: boolean;
            /**
             * @description Error message
             * @example An error occurred
             */
            message: string;
            /**
             * @description Error type
             * @example BadRequestException
             */
            error: string;
        };
        SignUpDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description User full name
             * @example John Doe
             */
            name: string;
            /**
             * @description Password (min 8 chars, at least one letter, one number, and one special character)
             * @example SecurePass123!
             */
            password: string;
        };
        UpdateUserDto: {
            /**
             * @description User full name
             * @example John Smith
             */
            name?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpDto"];
            };
        };
        responses: {
            /** @description User created successfully. Returns access token in body and sets refresh_token httpOnly cookie. */
            201: {
                headers: {
                    /** @description refresh_token httpOnly cookie (7 days expiry) */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example User created successfully */
                        message?: string;
                        data?: components["schemas"]["AuthResponseDto"];
                    };
                };
            };
            /** @description Bad Request - Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
            /** @description Conflict - User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example user@example.com */
                    email: string;
                    /** @example password123 */
                    password: string;
                };
            };
        };
        responses: {
            /** @description User signed in successfully. Returns access token in body and sets refresh_token httpOnly cookie. */
            200: {
                headers: {
                    /** @description refresh_token httpOnly cookie (7 days expiry) */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example User signed in successfully */
                        message?: string;
                        data?: components["schemas"]["AuthResponseDto"];
                    };
                };
            };
            /** @description Bad Request - Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
            /** @description Unauthorized - Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token refreshed successfully. Returns new access token in body and updates refresh_token httpOnly cookie. */
            200: {
                headers: {
                    /** @description Updated refresh_token httpOnly cookie (7 days expiry) */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example Token refreshed successfully */
                        message?: string;
                        data?: components["schemas"]["AuthResponseDto"];
                    };
                };
            };
            /** @description Unauthorized - Invalid or expired refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User logged out successfully. The refresh_token cookie has been cleared. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example Logged out successfully */
                        message?: string;
                        data?: {
                            /** @example Logged out successfully */
                            message?: string;
                        };
                    };
                };
            };
            /** @description Unauthorized - No refresh token found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    UsersController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example User profile retrieved successfully */
                        message?: string;
                        data?: components["schemas"]["UserEntity"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    UsersController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example User profile updated successfully */
                        message?: string;
                        data?: components["schemas"]["UserEntity"];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WrappedErrorResponseDto"];
                };
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example API is healthy */
                        message?: string;
                        data?: {
                            /** @example ok */
                            status?: string;
                            /** @example 2025-10-29T16:45:00.000Z */
                            timestamp?: string;
                            /** @example 3600 */
                            uptime?: number;
                            /** @example connected */
                            database?: string;
                        };
                    };
                };
            };
        };
    };
}
