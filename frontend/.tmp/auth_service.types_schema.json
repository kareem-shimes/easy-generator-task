{"openapi":"3.0.0","paths":{"/api":{"get":{"operationId":"AppController_getHello","parameters":[],"responses":{"200":{"description":""}},"tags":["App"]}},"/api/auth/signup":{"post":{"description":"Creates a new user account and returns access token. Sets httpOnly refresh token cookie.","operationId":"AuthController_signUp","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignUpDto"}}}},"responses":{"201":{"description":"User created successfully. Returns access token in body and sets refresh_token httpOnly cookie.","headers":{"Set-Cookie":{"description":"refresh_token httpOnly cookie (7 days expiry)","schema":{"type":"string","example":"refresh_token=eyJhbGc...; Path=/; HttpOnly; SameSite=Lax (dev) or Strict (prod)"}}},"content":{"application/json":{"schema":{"allOf":[{"properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"User created successfully"},"data":{"$ref":"#/components/schemas/AuthResponseDto"}}}]}}}},"400":{"description":"Bad Request - Validation failed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}},"409":{"description":"Conflict - User already exists","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"summary":"Sign up a new user","tags":["authentication"]}},"/api/auth/signin":{"post":{"description":"Authenticates user credentials and returns access token. Sets httpOnly refresh token cookie.","operationId":"AuthController_signIn","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"email":{"type":"string","example":"user@example.com"},"password":{"type":"string","example":"password123"}},"required":["email","password"]}}}},"responses":{"200":{"description":"User signed in successfully. Returns access token in body and sets refresh_token httpOnly cookie.","headers":{"Set-Cookie":{"description":"refresh_token httpOnly cookie (7 days expiry)","schema":{"type":"string","example":"refresh_token=eyJhbGc...; Path=/; HttpOnly; SameSite=Lax (dev) or Strict (prod)"}}},"content":{"application/json":{"schema":{"allOf":[{"properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"User signed in successfully"},"data":{"$ref":"#/components/schemas/AuthResponseDto"}}}]}}}},"400":{"description":"Bad Request - Validation failed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}},"401":{"description":"Unauthorized - Invalid credentials","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"summary":"Sign in an existing user","tags":["authentication"]}},"/api/auth/refresh":{"post":{"description":"Uses refresh token from httpOnly cookie to generate new access and refresh tokens. Requires refresh_token cookie.","operationId":"AuthController_refresh","parameters":[],"responses":{"200":{"description":"Token refreshed successfully. Returns new access token in body and updates refresh_token httpOnly cookie.","headers":{"Set-Cookie":{"description":"Updated refresh_token httpOnly cookie (7 days expiry)","schema":{"type":"string","example":"refresh_token=eyJhbGc...; Path=/; HttpOnly; SameSite=Lax (dev) or Strict (prod)"}}},"content":{"application/json":{"schema":{"allOf":[{"properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"Token refreshed successfully"},"data":{"$ref":"#/components/schemas/AuthResponseDto"}}}]}}}},"401":{"description":"Unauthorized - Invalid or expired refresh token","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"security":[{"refresh_token":[]}],"summary":"Refresh access token","tags":["authentication"]}},"/api/auth/logout":{"post":{"description":"Logs out the current user by clearing the refresh_token httpOnly cookie. The client should also discard the access token. Requires a valid refresh_token cookie to be present.","operationId":"AuthController_logout","parameters":[],"responses":{"200":{"description":"User logged out successfully. The refresh_token cookie has been cleared.","content":{"application/json":{"schema":{"type":"object","properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"Logged out successfully"},"data":{"type":"object","properties":{"message":{"type":"string","example":"Logged out successfully"}}}}}}}},"401":{"description":"Unauthorized - No refresh token found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"summary":"Logout user","tags":["authentication"]}},"/api/users/me":{"get":{"operationId":"UsersController_getProfile","parameters":[],"responses":{"200":{"description":"User profile retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"User profile retrieved successfully"},"data":{"$ref":"#/components/schemas/UserEntity"}}}]}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}},"404":{"description":"User not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"security":[{"bearer":[]}],"summary":"Get current user profile","tags":["users"]},"patch":{"operationId":"UsersController_updateProfile","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserDto"}}}},"responses":{"200":{"description":"User profile updated successfully","content":{"application/json":{"schema":{"allOf":[{"properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"User profile updated successfully"},"data":{"$ref":"#/components/schemas/UserEntity"}}}]}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}},"404":{"description":"User not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WrappedErrorResponseDto"}}}}},"security":[{"bearer":[]}],"summary":"Update current user profile","tags":["users"]}},"/api/health":{"get":{"operationId":"HealthController_check","parameters":[],"responses":{"200":{"description":"API is healthy","content":{"application/json":{"schema":{"type":"object","properties":{"success":{"type":"boolean","example":true},"message":{"type":"string","example":"API is healthy"},"data":{"type":"object","properties":{"status":{"type":"string","example":"ok"},"timestamp":{"type":"string","example":"2025-10-29T16:45:00.000Z"},"uptime":{"type":"number","example":3600},"database":{"type":"string","example":"connected"}}}}}}}}},"summary":"Health check endpoint","tags":["health"]}}},"info":{"title":"EasyGenerator Authentication API","description":"Authentication API with JWT and MongoDB","version":"1.0","contact":{}},"tags":[{"name":"authentication","description":"User authentication endpoints"},{"name":"users","description":"User management endpoints"},{"name":"health","description":"Health check endpoint"}],"servers":[],"components":{"securitySchemes":{"bearer":{"scheme":"bearer","bearerFormat":"JWT","type":"http"},"cookie":{"type":"http","in":"cookie","name":"refresh_token","description":"HttpOnly cookie containing refresh token"}},"schemas":{"UserEntity":{"type":"object","properties":{"_id":{"type":"string","example":"507f1f77bcf86cd799439011"},"email":{"type":"string","example":"user@example.com"},"name":{"type":"string","example":"John Doe"},"createdAt":{"format":"date-time","type":"string","example":"2025-10-29T10:30:00.000Z"},"updatedAt":{"format":"date-time","type":"string","example":"2025-10-29T10:30:00.000Z"}},"required":["_id","email","name","createdAt","updatedAt"]},"AuthResponseDto":{"type":"object","properties":{"user":{"$ref":"#/components/schemas/UserEntity"},"access_token":{"type":"string","example":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...","description":"JWT access token"}},"required":["user","access_token"]},"WrappedErrorResponseDto":{"type":"object","properties":{"success":{"type":"boolean","example":false,"description":"Indicates failure status"},"message":{"type":"string","example":"An error occurred","description":"Error message"},"error":{"type":"string","example":"BadRequestException","description":"Error type"}},"required":["success","message","error"]},"SignUpDto":{"type":"object","properties":{"email":{"type":"string","example":"user@example.com","description":"User email address"},"name":{"type":"string","example":"John Doe","description":"User full name","minLength":3},"password":{"type":"string","example":"SecurePass123!","description":"Password (min 8 chars, at least one letter, one number, and one special character)","minLength":8}},"required":["email","name","password"]},"UpdateUserDto":{"type":"object","properties":{"name":{"type":"string","example":"John Smith","description":"User full name","minLength":3}}}}}}